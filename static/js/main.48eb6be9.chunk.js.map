{"version":3,"sources":["images/overlay.png","helper/WebBridgeLoader.js","components/LandingPage.js","components/OtherPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","libs","concat","process","helper_WebBridgeLoader","WebBridgeLoader","Object","classCallCheck","this","loadedLib","numOfLib","gatap","window","bridge","init","registerHandler","callHandler","bridgeCallHandler","navbar","title","hideBackButton","showCloseIcon","_this","length","forEach","src","createScriptTag","then","push","enable","catch","Promise","res","rej","head","document","getElementsByTagName","tag","createElement","type","async","resolved","rejected","callback","successHandler","errorHandler","e","undefined","console","error","addEventListener","appendChild","LandingPage","props","possibleConstructorReturn","getPrototypeOf","call","showShare","shareImage","getElementById","shareType","genericImageUrl","addShare","rightItemsConfig","items","key","removeShare","showPopup","popUp","message","cancelText","okText","_ref","buttonClicked","showToast","toast","iconType","navigate","url","location","href","dimNavbar","isDim","color","alpha","setState","undimNavbar","copy","text","pickImage","maxCount","c","ctx","getContext","imageObj1","Image","imageObj2","image","onload","drawImage","overlay","naturalHeight","naturalWidth","img","toDataURL","state","visitCount","_this2","react_default","a","className","onClick","style","display","id","alt","Component","OtherPage","App","load","HashRouter","Fragment","Route","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48eb6be9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/overlay.c4334bec.png\";","const libs = [`${process.env.PUBLIC_URL}/web_bridge.js`];\n\nclass WebBridgeLoader {\n  libs;\n  loadedLib;\n  numOfLib;\n  constructor() {\n    this.libs = libs;\n    this.loadedLib = [];\n    this.numOfLib = 0;\n  }\n\n  enable() {\n    const gatap = \"_gatap_force_disable_\";\n    if (typeof window[gatap] === \"function\") {\n      window[gatap](true);\n    }\n    const bridge = window[\"WebViewJavascriptBridge\"];\n    bridge.init();\n    window[\"bridgeRegisterHandler\"] = bridge.registerHandler;\n    window[\"bridgeCallHandler\"] = bridge.callHandler;\n    const bridgeCallHandler = window[\"bridgeCallHandler\"];\n    bridgeCallHandler(\"configurePage\", {\n      navbar: {\n        title: \"Web Bridge Showcase\",\n        hideBackButton: 1, // if you need to hide the back button\n        showCloseIcon: 1 // if you need to show the close button\n      }\n    });\n  }\n\n  load() {\n    this.numOfLib = this.libs.length;\n    this.libs.forEach(src => {\n      this.createScriptTag(src)\n        .then(() => {\n          this.loadedLib.push(src);\n          if (this.numOfLib === this.loadedLib.length) {\n            this.enable();\n          }\n        })\n        .catch(() => {\n          // cannot use WebBridge\n        });\n    });\n  }\n\n  createScriptTag(src) {\n    return new Promise((res, rej) => {\n      const head = document.getElementsByTagName(\"head\")[0];\n      const tag = document.createElement(\"script\");\n      tag.type = \"text/javascript\";\n      tag.async = false;\n      tag.src = src;\n\n      const onreadystatechange = \"onreadystatechange\";\n      const readyState = \"readyState\";\n      let resolved = false;\n      let rejected = false;\n\n      const callback = (tag[onreadystatechange] = () => {\n        if (resolved) {\n          return successHandler();\n        }\n        if (rejected) {\n          return errorHandler(\"err\");\n        }\n\n        if (tag[readyState] === \"complete\") {\n          successHandler();\n        } else if (tag[readyState] === \"error\") {\n          errorHandler(\"err\");\n        }\n      });\n\n      const successHandler = () => {\n        resolved = true;\n        res(src);\n      };\n      const errorHandler = e => {\n        rejected = true;\n        if (e.type !== undefined && e.type === \"error\") {\n          // tslint:disable-next-line:no-console\n          console.error(`Failed load resource from ${src}`);\n        } else {\n          // tslint:disable-next-line:no-console\n          console.error(\"Failed create element\");\n        }\n        rej(src);\n      };\n\n      tag.addEventListener(\"load\", successHandler);\n      tag.addEventListener(\"error\", errorHandler);\n\n      head.appendChild(tag);\n      return callback();\n    });\n  }\n}\n\nexport default new WebBridgeLoader();\n","import React, { Component } from \"react\";\nimport overlay from \"../images/overlay.png\";\nimport \"../App.css\";\n\nclass LandingPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDim: false,\n      visitCount: 0\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ visitCount: this.state.visitCount + 1 });\n  }\n\n  showShare = () => {\n    const shareImage = document.getElementById(\"myImage\").src;\n    window[\"bridgeCallHandler\"](\"share\", {\n      shareType: 4,\n      genericImageUrl: shareImage\n    });\n  };\n\n  addShare = () => {\n    window[\"bridgeCallHandler\"](\"configurePage\", {\n      navbar: {\n        title: \"Web Bridge Showcase\",\n        hideBackButton: 1, // if you need to hide the back button\n        showCloseIcon: 1, // if you need to show the close button\n        rightItemsConfig: {\n          items: [\n            {\n              type: \"button\",\n              key: \"share\"\n            }\n          ]\n        }\n      }\n    });\n\n    window[\"bridgeRegisterHandler\"](\"onEventCallback\", function(e) {\n      if (e.key == \"share\") {\n        this.showShare();\n      }\n    });\n  };\n\n  removeShare = () => {\n    window[\"bridgeCallHandler\"](\"configurePage\", {\n      navbar: {\n        title: \"Web Bridge Showcase\",\n        hideBackButton: 1, // if you need to hide the back button\n        showCloseIcon: 1, // if you need to show the close button\n        rightItemsConfig: {\n          items: []\n        }\n      }\n    });\n  };\n\n  showPopup = () => {\n    window[\"bridgeCallHandler\"](\n      \"showPopUp\",\n      {\n        popUp: {\n          title: \"This is a popup title!\",\n          message: `This is popup message, unfortunately this popup can't show any image.`,\n          cancelText: \"Cancel Text\",\n          okText: \"Ok text\"\n        }\n      },\n      ({ buttonClicked }) => {\n        // 0 - Clicked OK\n        // 1 - Clicked Cancel\n        // 2 - (Android only) Clicked Other part of screen\n        // or back button is pressed\n        if (buttonClicked === 0) {\n          this.showShare();\n        }\n      }\n    );\n  };\n\n  showToast = () => {\n    window[\"bridgeCallHandler\"](\"showToast\", {\n      toast: {\n        iconType: \"success\", // Image on toast message. Ignored by Android. Only used by iOS. Available types: success & failure\n        message: \"This is a toast!\"\n      }\n    });\n  };\n\n  navigate = () => {\n    const url = `${window.location.href}other`;\n    window[\"bridgeCallHandler\"](\"navigate\", {\n      url\n    });\n  };\n\n  dimNavbar = () => {\n    window[\"bridgeCallHandler\"](\"dimNavbar\", {\n      isDim: true,\n      color: \"000000\",\n      alpha: 0.5\n    });\n    this.setState({ isDim: true });\n  };\n\n  undimNavbar = () => {\n    window[\"bridgeCallHandler\"](\"dimNavbar\", {\n      isDim: false,\n      color: \"000000\",\n      alpha: 0.5\n    });\n    this.setState({ isDim: false });\n  };\n\n  copy = text => {\n    window[\"bridgeCallHandler\"](\"copyTextToClipboard\", {\n      text\n    });\n  };\n\n  pickImage = () => {\n    window[\"bridgeCallHandler\"](\n      \"pickImage\",\n      {\n        maxCount: 1,\n        type: 1\n      },\n      res => {\n        var c = document.getElementById(\"myCanvas\");\n        var ctx = c.getContext(\"2d\");\n        var imageObj1 = new Image();\n        var imageObj2 = new Image();\n        imageObj1.src = res.image;\n        imageObj1.onload = function() {\n          ctx.drawImage(imageObj1, 0, 0, 300, 300);\n          imageObj2.src = overlay;\n          imageObj2.onload = function() {\n            ctx.drawImage(\n              imageObj2,\n              0,\n              0,\n              imageObj2.naturalHeight,\n              imageObj2.naturalWidth\n            );\n            var img = c.toDataURL(\"image/png\");\n            document.getElementById(\"myImage\").src = img;\n          };\n        };\n      }\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div\n          className=\"overlay\"\n          onClick={this.undimNavbar}\n          style={{ display: this.state.isDim ? \"block\" : \"none\" }}\n        >\n          <div className=\"overlay-text\">Click anywhere to undim</div>\n        </div>\n        <div className=\"item\" onClick={this.showShare}>\n          Show share menu\n        </div>\n        <div className=\"item\" onClick={this.addShare}>\n          Add share menu to navbar\n        </div>\n        <div className=\"item\" onClick={this.removeShare}>\n          Remove share menu to navbar\n        </div>\n        <div className=\"item\" onClick={this.showPopup}>\n          Show popup\n        </div>\n        <div className=\"item\" onClick={this.showToast}>\n          Show toast\n        </div>\n        <div className=\"item\" onClick={this.navigate}>\n          Move to another page\n        </div>\n        <div className=\"item\" onClick={this.dimNavbar}>\n          Dim navbar\n        </div>\n        <div className=\"item\" onClick={this.pickImage}>\n          Pick Image\n        </div>\n        <canvas id=\"myCanvas\" />\n        <img id=\"myImage\" style={{ display: \"none\" }} alt=\"myImage\" />\n        <div\n          className=\"item\"\n          onClick={() => this.copy(\"Copy this text to clipboard!\")}\n        >\n          Copy this text to clipboard!\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LandingPage;\n","import React, { Component } from \"react\";\nimport \"../App.css\";\n\nclass OtherPage extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        Try clicking the close button on the navbar or touch your phone back\n        button!\n      </div>\n    );\n  }\n}\n\nexport default OtherPage;\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport WebBridgeLoader from \"./helper/WebBridgeLoader\";\nimport LandingPage from \"./components/LandingPage\";\nimport OtherPage from \"./components/OtherPage\";\n\nclass App extends Component {\n  componentDidMount() {\n    WebBridgeLoader.load();\n  }\n\n  render() {\n    return (\n      <Router>\n        <React.Fragment>\n          <Route exact path=\"/\" component={LandingPage} />\n          <Route exact path=\"/other\" component={OtherPage} />\n        </React.Fragment>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}