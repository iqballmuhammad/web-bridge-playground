{"version":3,"sources":["images/overlay.png","helper/WebBridgeLoader.js","components/LandingPage.js","components/OtherPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","libs","concat","process","helper_WebBridgeLoader","WebBridgeLoader","Object","classCallCheck","this","loadedLib","numOfLib","gatap","window","bridge","init","registerHandler","callHandler","bridgeCallHandler","navbar","title","hideBackButton","showCloseIcon","_this","length","forEach","src","createScriptTag","then","push","enable","catch","Promise","res","rej","head","document","getElementsByTagName","tag","createElement","type","async","resolved","rejected","callback","successHandler","errorHandler","e","undefined","console","error","addEventListener","appendChild","LandingPage","props","possibleConstructorReturn","getPrototypeOf","call","showShare","shareImage","getElementById","sharingAppIDsTop","_ref","status","sharingAppID","log","sharingData","image","imageBase64","_ref2","errorCode","errorMessage","getRecentImage","width","height","tnWidth","tnHeight","setState","data","addScreenshotListener","addShare","rightItemsConfig","items","key","removeShare","checkPermission","permissionList","_ref3","resultList","list","JSON","parse","showToast","requestAppPermission","popupText","alert","stringify","showPopup","popUp","message","cancelText","okText","_ref4","buttonClicked","toast","iconType","navigate","url","location","href","dimNavbar","isDim","color","alpha","undimNavbar","copy","text","getDeviceInfo","deviceID","pickImage","maxCount","c","ctx","getContext","imageObj1","Image","imageObj2","onload","drawImage","overlay","naturalHeight","naturalWidth","img","toDataURL","saveImage","imageUrl","handleUrlChange","event","target","value","generateShortenedUrl","ShareSDK","generateShortLink","desc","imgUrl","shortenedUrl","shortLink","state","visitCount","str","utf8","i","charcode","charCodeAt","_this2","react_default","a","className","onChange","onClick","Component","OtherPage","App","load","react_router_dom","Fragment","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qOCAlCC,EAAO,IAAAC,OAAIC,yBAAJ,mBAoGEC,EAAA,eA9Fb,SAAAC,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GACbG,KAAKP,KAAOA,EACZO,KAAKC,UAAY,GACjBD,KAAKE,SAAW,uDAIhB,IAAMC,EAAQ,wBACe,oBAAlBC,OAAOD,IAChBC,OAAOD,IAAO,GAEhB,IAAME,EAASD,OAAM,wBACrBC,EAAOC,OACPF,OAAM,sBAA4BC,EAAOE,gBACzCH,OAAM,kBAAwBC,EAAOG,aAErCC,EAD0BL,OAAM,mBACd,gBAAiB,CACjCM,OAAQ,CACNC,MAAO,sBACPC,eAAgB,EAChBC,cAAe,oCAKd,IAAAC,EAAAd,KACLA,KAAKE,SAAWF,KAAKP,KAAKsB,OAC1Bf,KAAKP,KAAKuB,QAAQ,SAAAC,GAChBH,EAAKI,gBAAgBD,GAClBE,KAAK,WACJL,EAAKb,UAAUmB,KAAKH,GAChBH,EAAKZ,WAAaY,EAAKb,UAAUc,QACnCD,EAAKO,WAGRC,MAAM,wDAMGL,GACd,OAAO,IAAIM,QAAQ,SAACC,EAAKC,GACvB,IAAMC,EAAOC,SAASC,qBAAqB,QAAQ,GAC7CC,EAAMF,SAASG,cAAc,UACnCD,EAAIE,KAAO,kBACXF,EAAIG,OAAQ,EACZH,EAAIZ,IAAMA,EAEV,IAEIgB,GAAW,EACXC,GAAW,EAETC,EAAYN,EAAG,mBAAuB,WAC1C,OAAII,EACKG,IAELF,EACKG,EAAa,YAGE,aAApBR,EAAG,WACLO,IAC6B,UAApBP,EAAG,YACZQ,EAAa,SAIXD,EAAiB,WACrBH,GAAW,EACXT,EAAIP,IAEAoB,EAAe,SAAAC,GACnBJ,GAAW,OACIK,IAAXD,EAAEP,MAAiC,UAAXO,EAAEP,KAE5BS,QAAQC,MAAR,6BAAA/C,OAA2CuB,IAG3CuB,QAAQC,MAAM,yBAEhBhB,EAAIR,IAON,OAJAY,EAAIa,iBAAiB,OAAQN,GAC7BP,EAAIa,iBAAiB,QAASL,GAE9BX,EAAKiB,YAAYd,GACVM,iDCsRES,cA/Wb,SAAAA,EAAYC,GAAO,IAAA/B,EAAA,OAAAhB,OAAAC,EAAA,EAAAD,CAAAE,KAAA4C,IACjB9B,EAAAhB,OAAAgD,EAAA,EAAAhD,CAAAE,KAAAF,OAAAiD,EAAA,EAAAjD,CAAA8C,GAAAI,KAAAhD,KAAM6C,KA4CRI,UAAY,WAEV,IAAMC,EAAavB,SAASwB,eAAe,WAAWlC,IAKtDb,OAAM,kBACJ,mBACA,CACEO,MAAO,cACPyC,iBAAkB,CAChB,gBACA,oBACA,UACA,YACA,aAGJ,SAAAC,GAA8B,IAA3BC,EAA2BD,EAA3BC,OAAQC,EAAmBF,EAAnBE,aACTf,QAAQgB,IAAIF,EAAQC,GACpBnD,OAAM,kBACJ,YACA,CACEmD,eACAE,YAAa,CACXC,MAAO,CACLC,YAAaT,KAInB,SAAAU,GAAiC,IAA9BC,EAA8BD,EAA9BC,UAAWC,EAAmBF,EAAnBE,aACZtB,QAAQgB,IAAI,iBAAmBK,EAAWC,QA7EjChD,EAoFnBiD,eAAiB,WACf3D,OAAM,kBACJ,iBACA,CACE4D,MAAO,EACPC,OAAQ,KACRC,QAAS,IACTC,SAAU,KAEZ,SAAA3C,GACEV,EAAKsD,SAAS,CAAEV,MAAOlC,EAAI6C,KAAKX,WA9FnB5C,EAmGnBwD,sBAAwB,WACtBlE,OAAM,kBAAsB,8BAA+B,GAAI,SAAAoB,GAC3C,IAAdA,EAAIiB,OACNrC,OAAM,sBAA0B,mBAAoB,SAAAoB,GACpC,IAAdA,EAAIiB,OAAe3B,EAAKiD,sBAvGbjD,EA6GnByD,SAAW,WACTnE,OAAM,kBAAsB,gBAAiB,CAC3CM,OAAQ,CACNC,MAAO,sBACPC,eAAgB,EAChBC,cAAe,EACf2D,iBAAkB,CAChBC,MAAO,CACL,CACE1C,KAAM,SACN2C,IAAK,cAOftE,OAAM,sBAA0B,kBAAmB,SAAAkC,GACnC,UAAVA,EAAEoC,KACJ5D,EAAKmC,eAhIQnC,EAqInB6D,YAAc,WACZvE,OAAM,kBAAsB,gBAAiB,CAC3CM,OAAQ,CACNC,MAAO,sBACPC,eAAgB,EAChBC,cAAe,EACf2D,iBAAkB,CAChBC,MAAO,QA5II3D,EAkJnB8D,gBAAkB,WAChBxE,OAAM,kBACJ,qBACA,CACEyE,eAAgB,CAAC,YAEnB,SAAAC,GAAoB,IAAjBC,EAAiBD,EAAjBC,WACKC,EAAOC,KAAKC,MAAMH,GACpBC,GAAQA,EAAK,GACflE,EAAKqE,UAAU,wCAEfrE,EAAKsE,0BA7JMtE,EAmKnBsE,qBAAuB,WACrBhF,OAAM,kBACJ,uBACA,CACEyE,eAAgB,CAAC,WACjBQ,UACE,kFAEJ,SAAAhB,GACkB,kBAATA,EAAoBiB,MAAMjB,GAAQiB,MAAML,KAAKM,UAAUlB,OA5KjDvD,EAiLnB0E,UAAY,WACVpF,OAAM,kBACJ,YACA,CACEqF,MAAO,CACL9E,MAAO,yBACP+E,QAAO,wEACPC,WAAY,cACZC,OAAQ,YAGZ,SAAAC,GAKwB,IALDA,EAApBC,eAMChF,EAAKmC,eAlMMnC,EAwMnBqE,UAAY,SAAAO,GACVtF,OAAM,kBAAsB,YAAa,CACvC2F,MAAO,CACLC,SAAU,UACVN,cA5Ma5E,EAiNnBmF,SAAW,WACT,IAAMC,EAAG,GAAAxG,OAAMU,OAAO+F,SAASC,KAAtB,SACThG,OAAM,kBAAsB,WAAY,CACtC8F,SApNepF,EAwNnBuF,UAAY,WACVjG,OAAM,kBAAsB,YAAa,CACvCkG,OAAO,EACPC,MAAO,SACPC,MAAO,KAET1F,EAAKsD,SAAS,CAAEkC,OAAO,KA9NNxF,EAiOnB2F,YAAc,WACZrG,OAAM,kBAAsB,YAAa,CACvCkG,OAAO,EACPC,MAAO,SACPC,MAAO,KAET1F,EAAKsD,SAAS,CAAEkC,OAAO,KAvONxF,EA0OnB4F,KAAO,SAAAC,GACLvG,OAAM,kBAAsB,sBAAuB,CACjDuG,UA5Oe7F,EAgPnB8F,cAAgB,WACdxG,OAAM,kBAAsB,aAAc,GAAI,SAAAoB,GAC5CV,EAAK4F,KAAKlF,EAAIqF,UACdvB,MAAM9D,EAAIqF,aAnPK/F,EAuPnBgG,UAAY,WACV1G,OAAM,kBACJ,YACA,CACE2G,SAAU,EACVhF,KAAM,GAER,SAAAP,GACE,IAAIwF,EAAIrF,SAASwB,eAAe,YAC5B8D,EAAMD,EAAEE,WAAW,MACnBC,EAAY,IAAIC,MAChBC,EAAY,IAAID,MACpBD,EAAUlG,IAAMO,EAAIkC,MACpByD,EAAUG,OAAS,WACjBL,EAAIM,UAAUJ,EAAW,EAAG,EAAG,IAAK,KACpCE,EAAUpG,IAAMuG,IAChBH,EAAUC,OAAS,WACjBL,EAAIM,UACFF,EACA,EACA,EACAA,EAAUI,cACVJ,EAAUK,cAEZ,IAAIC,EAAMX,EAAEY,UAAU,aACtBjG,SAASwB,eAAe,WAAWlC,IAAM0G,OAhRhC7G,EAuRnB+G,UAAY,WACVzH,OAAM,kBAAsB,YAAa,CACvC0H,SAAUnG,SAASwB,eAAe,WAAWlC,OAzR9BH,EA6RnBiH,gBAAkB,SAAAC,GAChBlH,EAAKsD,SAAS,CAAE8B,IAAK8B,EAAMC,OAAOC,SA9RjBpH,EAiSnBqH,qBAAuB,SAAAjC,GACJ,IAAIkC,IAAS,qBAAsB,KAAM,QAEvDC,kBAAkBnC,EAAK,CACtBvF,MAAO,cACP2H,KAAM,aACNC,OAAQ,kEAETpH,KAAK,SAAAK,GACJgB,QAAQgB,IAAIhC,GAQZA,EAAI6C,MAAQvD,EAAKsD,SAAS,CAAEoE,aAAchH,EAAI6C,KAAKoE,eAhTvD3H,EAAK4H,MAAQ,CACXpC,OAAO,EACPqC,WAAY,EACZjF,MAAO,KACPwC,IAAK,GACLsC,aAAc,IAPC1H,2EAWP8H,GAEV,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAIF,EAAI7H,OAAQ+H,IAAK,CACnC,IAAIC,EAAWH,EAAII,WAAWF,GAC1BC,EAAW,IAAMF,EAAKzH,KAAK2H,GACtBA,EAAW,KAClBF,EAAKzH,KAAK,IAAQ2H,GAAY,EAAI,IAAmB,GAAXA,GACjCA,EAAW,OAAUA,GAAY,MAC1CF,EAAKzH,KACH,IAAQ2H,GAAY,GACpB,IAASA,GAAY,EAAK,GAC1B,IAAmB,GAAXA,IAKVD,IACAC,GAAwB,KAAXA,IAAqB,GAA2B,KAApBH,EAAII,WAAWF,GACxDD,EAAKzH,KACH,IAAQ2H,GAAY,GACpB,IAASA,GAAY,GAAM,GAC3B,IAASA,GAAY,EAAK,GAC1B,IAAmB,GAAXA,IAId,OAAOF,8CAKP7I,KAAKoE,SAAS,CAAEuE,WAAY3I,KAAK0I,MAAMC,WAAa,qCA4Q7C,IAAAM,EAAAjJ,KACP,OACEkJ,EAAAC,EAAArH,cAAA,OAAKsH,UAAU,OACbF,EAAAC,EAAArH,cAAA,YACAoH,EAAAC,EAAArH,cAAA,WACEoH,EAAAC,EAAArH,cAAA,SACEC,KAAK,OACLmG,MAAOlI,KAAK0I,MAAMxC,IAClBmD,SAAUrJ,KAAK+H,mBAGnBmB,EAAAC,EAAArH,cAAA,WACEoH,EAAAC,EAAArH,cAAA,UAAQwH,QAAS,kBAAML,EAAKd,qBAAqBc,EAAKP,MAAMxC,OAA5D,gBAIFgD,EAAAC,EAAArH,cAAA,WAAM9B,KAAK0I,MAAMF,cACjBU,EAAAC,EAAArH,cAAA,WAAKoH,EAAAC,EAAArH,cAAA,UAAQwH,QAAStJ,KAAK4G,eAAtB,0BAxUa2C,aCSXC,mLATX,OACEN,EAAAC,EAAArH,cAAA,OAAKsH,UAAU,OAAf,uFAHkBG,aCoBTE,8LAfX5J,EAAgB6J,wCAIhB,OACER,EAAAC,EAAArH,cAAC6H,EAAA,EAAD,KACET,EAAAC,EAAArH,cAACoH,EAAAC,EAAMS,SAAP,KACEV,EAAAC,EAAArH,cAAC+H,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpH,IACjCsG,EAAAC,EAAArH,cAAC+H,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWR,aAV9BD,aCMEU,QACW,cAA7B7J,OAAO+F,SAAS+D,UAEe,UAA7B9J,OAAO+F,SAAS+D,UAEhB9J,OAAO+F,SAAS+D,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAArH,cAACwI,EAAD,MAAS3I,SAASwB,eAAe,SD2H3C,kBAAmBoH,WACrBA,UAAUC,cAAcC,MAAMtJ,KAAK,SAAAuJ,GACjCA,EAAaC","file":"static/js/main.26284965.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/overlay.c4334bec.png\";","const libs = [`${process.env.PUBLIC_URL}/web_bridge.js`];\r\n\r\nclass WebBridgeLoader {\r\n  libs;\r\n  loadedLib;\r\n  numOfLib;\r\n  constructor() {\r\n    this.libs = libs;\r\n    this.loadedLib = [];\r\n    this.numOfLib = 0;\r\n  }\r\n\r\n  enable() {\r\n    const gatap = \"_gatap_force_disable_\";\r\n    if (typeof window[gatap] === \"function\") {\r\n      window[gatap](true);\r\n    }\r\n    const bridge = window[\"WebViewJavascriptBridge\"];\r\n    bridge.init();\r\n    window[\"bridgeRegisterHandler\"] = bridge.registerHandler;\r\n    window[\"bridgeCallHandler\"] = bridge.callHandler;\r\n    const bridgeCallHandler = window[\"bridgeCallHandler\"];\r\n    bridgeCallHandler(\"configurePage\", {\r\n      navbar: {\r\n        title: \"Web Bridge Showcase\",\r\n        hideBackButton: 1, // if you need to hide the back button\r\n        showCloseIcon: 1 // if you need to show the close button\r\n      }\r\n    });\r\n  }\r\n\r\n  load() {\r\n    this.numOfLib = this.libs.length;\r\n    this.libs.forEach(src => {\r\n      this.createScriptTag(src)\r\n        .then(() => {\r\n          this.loadedLib.push(src);\r\n          if (this.numOfLib === this.loadedLib.length) {\r\n            this.enable();\r\n          }\r\n        })\r\n        .catch(() => {\r\n          // cannot use WebBridge\r\n        });\r\n    });\r\n  }\r\n\r\n  createScriptTag(src) {\r\n    return new Promise((res, rej) => {\r\n      const head = document.getElementsByTagName(\"head\")[0];\r\n      const tag = document.createElement(\"script\");\r\n      tag.type = \"text/javascript\";\r\n      tag.async = false;\r\n      tag.src = src;\r\n\r\n      const onreadystatechange = \"onreadystatechange\";\r\n      const readyState = \"readyState\";\r\n      let resolved = false;\r\n      let rejected = false;\r\n\r\n      const callback = (tag[onreadystatechange] = () => {\r\n        if (resolved) {\r\n          return successHandler();\r\n        }\r\n        if (rejected) {\r\n          return errorHandler(\"err\");\r\n        }\r\n\r\n        if (tag[readyState] === \"complete\") {\r\n          successHandler();\r\n        } else if (tag[readyState] === \"error\") {\r\n          errorHandler(\"err\");\r\n        }\r\n      });\r\n\r\n      const successHandler = () => {\r\n        resolved = true;\r\n        res(src);\r\n      };\r\n      const errorHandler = e => {\r\n        rejected = true;\r\n        if (e.type !== undefined && e.type === \"error\") {\r\n          // tslint:disable-next-line:no-console\r\n          console.error(`Failed load resource from ${src}`);\r\n        } else {\r\n          // tslint:disable-next-line:no-console\r\n          console.error(\"Failed create element\");\r\n        }\r\n        rej(src);\r\n      };\r\n\r\n      tag.addEventListener(\"load\", successHandler);\r\n      tag.addEventListener(\"error\", errorHandler);\r\n\r\n      head.appendChild(tag);\r\n      return callback();\r\n    });\r\n  }\r\n}\r\n\r\nexport default new WebBridgeLoader();\r\n","import React, { Component } from \"react\";\r\nimport overlay from \"../images/overlay.png\";\r\nimport \"../App.css\";\r\nimport ShareSDK from \"@gameplatform-sdk/share\";\r\n\r\nclass LandingPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isDim: false,\r\n      visitCount: 0,\r\n      image: null,\r\n      url: \"\",\r\n      shortenedUrl: \"\"\r\n    };\r\n  }\r\n\r\n  toUTF8Array(str) {\r\n    var utf8 = [];\r\n    for (var i = 0; i < str.length; i++) {\r\n      var charcode = str.charCodeAt(i);\r\n      if (charcode < 0x80) utf8.push(charcode);\r\n      else if (charcode < 0x800) {\r\n        utf8.push(0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f));\r\n      } else if (charcode < 0xd800 || charcode >= 0xe000) {\r\n        utf8.push(\r\n          0xe0 | (charcode >> 12),\r\n          0x80 | ((charcode >> 6) & 0x3f),\r\n          0x80 | (charcode & 0x3f)\r\n        );\r\n      }\r\n      // surrogate pair\r\n      else {\r\n        i++;\r\n        charcode = ((charcode & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff);\r\n        utf8.push(\r\n          0xf0 | (charcode >> 18),\r\n          0x80 | ((charcode >> 12) & 0x3f),\r\n          0x80 | ((charcode >> 6) & 0x3f),\r\n          0x80 | (charcode & 0x3f)\r\n        );\r\n      }\r\n    }\r\n    return utf8;\r\n  }\r\n\r\n  componentDidMount() {\r\n    // setTimeout(() => this.addScreenshotListener(), 1000);\r\n    this.setState({ visitCount: this.state.visitCount + 1 });\r\n  }\r\n\r\n  showShare = () => {\r\n    // const shareImage = `https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500`;\r\n    const shareImage = document.getElementById(\"myImage\").src;\r\n    // window[\"bridgeCallHandler\"](\"share\", {\r\n    //   shareType: 4,\r\n    //   genericImageUrl: shareImage\r\n    // });\r\n    window[\"bridgeCallHandler\"](\r\n      \"showSharingPanel\",\r\n      {\r\n        title: \"Share Title\",\r\n        sharingAppIDsTop: [\r\n          \"facebookPhoto\",\r\n          \"facebookMessenger\",\r\n          \"twitter\",\r\n          \"instagram\",\r\n          \"lineChat\"\r\n        ]\r\n      },\r\n      ({ status, sharingAppID }) => {\r\n        console.log(status, sharingAppID);\r\n        window[\"bridgeCallHandler\"](\r\n          \"shareData\",\r\n          {\r\n            sharingAppID,\r\n            sharingData: {\r\n              image: {\r\n                imageBase64: shareImage\r\n              }\r\n            }\r\n          },\r\n          ({ errorCode, errorMessage }) => {\r\n            console.log(\"Share result: \" + errorCode, errorMessage);\r\n          }\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  getRecentImage = () => {\r\n    window[\"bridgeCallHandler\"](\r\n      \"getRecentImage\",\r\n      {\r\n        width: 0,\r\n        height: 1500,\r\n        tnWidth: 200,\r\n        tnHeight: 200\r\n      },\r\n      res => {\r\n        this.setState({ image: res.data.image });\r\n      }\r\n    );\r\n  };\r\n\r\n  addScreenshotListener = () => {\r\n    window[\"bridgeCallHandler\"](\"registerScreenshotDetection\", {}, res => {\r\n      if (res.error === 0) {\r\n        window[\"bridgeRegisterHandler\"](\"SCREENSHOT_EVENT\", res => {\r\n          res.error === 0 && this.getRecentImage();\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  addShare = () => {\r\n    window[\"bridgeCallHandler\"](\"configurePage\", {\r\n      navbar: {\r\n        title: \"Web Bridge Showcase\",\r\n        hideBackButton: 1, // if you need to hide the back button\r\n        showCloseIcon: 1, // if you need to show the close button\r\n        rightItemsConfig: {\r\n          items: [\r\n            {\r\n              type: \"button\",\r\n              key: \"share\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n\r\n    window[\"bridgeRegisterHandler\"](\"onEventCallback\", e => {\r\n      if (e.key === \"share\") {\r\n        this.showShare();\r\n      }\r\n    });\r\n  };\r\n\r\n  removeShare = () => {\r\n    window[\"bridgeCallHandler\"](\"configurePage\", {\r\n      navbar: {\r\n        title: \"Web Bridge Showcase\",\r\n        hideBackButton: 1, // if you need to hide the back button\r\n        showCloseIcon: 1, // if you need to show the close button\r\n        rightItemsConfig: {\r\n          items: []\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  checkPermission = () => {\r\n    window[\"bridgeCallHandler\"](\r\n      \"checkAppPermission\",\r\n      {\r\n        permissionList: [\"contact\"]\r\n      },\r\n      ({ resultList }) => {\r\n        const list = JSON.parse(resultList);\r\n        if (list && list[0]) {\r\n          this.showToast(\"Contact permission is alredy given  \");\r\n        } else {\r\n          this.requestAppPermission();\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  requestAppPermission = () => {\r\n    window[\"bridgeCallHandler\"](\r\n      \"requestAppPermission\",\r\n      {\r\n        permissionList: [\"contact\"],\r\n        popupText:\r\n          \"In order to use this feature, Shopee needs to access your contact information.\"\r\n      },\r\n      data => {\r\n        typeof data === \"string\" ? alert(data) : alert(JSON.stringify(data));\r\n      }\r\n    );\r\n  };\r\n\r\n  showPopup = () => {\r\n    window[\"bridgeCallHandler\"](\r\n      \"showPopUp\",\r\n      {\r\n        popUp: {\r\n          title: \"This is a popup title!\",\r\n          message: `This is popup message, unfortunately this popup can't show any image.`,\r\n          cancelText: \"Cancel Text\",\r\n          okText: \"Ok text\"\r\n        }\r\n      },\r\n      ({ buttonClicked }) => {\r\n        // 0 - Clicked OK\r\n        // 1 - Clicked Cancel\r\n        // 2 - (Android only) Clicked Other part of screen\r\n        // or back button is pressed\r\n        if (buttonClicked === 0) {\r\n          this.showShare();\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  showToast = message => {\r\n    window[\"bridgeCallHandler\"](\"showToast\", {\r\n      toast: {\r\n        iconType: \"success\", // Image on toast message. Ignored by Android. Only used by iOS. Available types: success & failure\r\n        message\r\n      }\r\n    });\r\n  };\r\n\r\n  navigate = () => {\r\n    const url = `${window.location.href}other`;\r\n    window[\"bridgeCallHandler\"](\"navigate\", {\r\n      url\r\n    });\r\n  };\r\n\r\n  dimNavbar = () => {\r\n    window[\"bridgeCallHandler\"](\"dimNavbar\", {\r\n      isDim: true,\r\n      color: \"000000\",\r\n      alpha: 0.5\r\n    });\r\n    this.setState({ isDim: true });\r\n  };\r\n\r\n  undimNavbar = () => {\r\n    window[\"bridgeCallHandler\"](\"dimNavbar\", {\r\n      isDim: false,\r\n      color: \"000000\",\r\n      alpha: 0.5\r\n    });\r\n    this.setState({ isDim: false });\r\n  };\r\n\r\n  copy = text => {\r\n    window[\"bridgeCallHandler\"](\"copyTextToClipboard\", {\r\n      text\r\n    });\r\n  };\r\n\r\n  getDeviceInfo = () => {\r\n    window[\"bridgeCallHandler\"](\"getAppInfo\", {}, res => {\r\n      this.copy(res.deviceID);\r\n      alert(res.deviceID);\r\n    });\r\n  };\r\n\r\n  pickImage = () => {\r\n    window[\"bridgeCallHandler\"](\r\n      \"pickImage\",\r\n      {\r\n        maxCount: 1,\r\n        type: 1\r\n      },\r\n      res => {\r\n        var c = document.getElementById(\"myCanvas\");\r\n        var ctx = c.getContext(\"2d\");\r\n        var imageObj1 = new Image();\r\n        var imageObj2 = new Image();\r\n        imageObj1.src = res.image;\r\n        imageObj1.onload = function() {\r\n          ctx.drawImage(imageObj1, 0, 0, 300, 300);\r\n          imageObj2.src = overlay;\r\n          imageObj2.onload = function() {\r\n            ctx.drawImage(\r\n              imageObj2,\r\n              0,\r\n              0,\r\n              imageObj2.naturalHeight,\r\n              imageObj2.naturalWidth\r\n            );\r\n            var img = c.toDataURL(\"image/png\");\r\n            document.getElementById(\"myImage\").src = img;\r\n          };\r\n        };\r\n      }\r\n    );\r\n  };\r\n\r\n  saveImage = () => {\r\n    window[\"bridgeCallHandler\"](\"saveImage\", {\r\n      imageUrl: document.getElementById(\"myImage\").src\r\n    });\r\n  };\r\n\r\n  handleUrlChange = event => {\r\n    this.setState({ url: event.target.value });\r\n  };\r\n\r\n  generateShortenedUrl = url => {\r\n    const shareSdk = new ShareSDK(\"FfXqXeCJ8I0lQbLlDz\", \"id\", \"test\");\r\n    shareSdk\r\n      .generateShortLink(url, {\r\n        title: \"share title\",\r\n        desc: \"share desc\",\r\n        imgUrl: \"https://cf.shopee.co.id/file/eca6e6060d408a6b6f97461a5b8c0c8e\"\r\n      })\r\n      .then(res => {\r\n        console.log(res);\r\n        //{\r\n        //  code: 0,\r\n        //  msg: '',\r\n        //  data: {\r\n        //      shortLink: 'https://test.shp.ee/c8ghb67'\r\n        //  }\r\n        //}\r\n        res.data && this.setState({ shortenedUrl: res.data.shortLink });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div></div>\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.url}\r\n            onChange={this.handleUrlChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button onClick={() => this.generateShortenedUrl(this.state.url)}>\r\n            Shorten Url\r\n          </button>\r\n        </div>\r\n        <div>{this.state.shortenedUrl}</div>\r\n        <div><button onClick={this.getDeviceInfo}>Get Device Id</button></div>\r\n        {/* <div className=\"item\" onClick={this.getRecentImage}>\r\n          Screenshot Image\r\n          {this.state.image && (\r\n            <img alt=\"asd\" src={this.state.image} height=\"300\" />\r\n          )}\r\n        </div>\r\n        <div\r\n          className=\"overlay\"\r\n          onClick={this.undimNavbar}\r\n          style={{ display: this.state.isDim ? \"block\" : \"none\" }}\r\n        >\r\n          <div className=\"overlay-text\">Click anywhere to undim</div>\r\n        </div>\r\n        <div className=\"item\" onClick={this.checkPermission}>\r\n          Check contact permission\r\n        </div>\r\n        <div className=\"item\" onClick={this.showPopup}>\r\n          Show popup\r\n        </div>\r\n        <div className=\"item\" onClick={this.showToast}>\r\n          Show toast\r\n        </div>\r\n        <div className=\"item\" onClick={this.navigate}>\r\n          Move to another page\r\n        </div>\r\n        <div className=\"item\" onClick={this.dimNavbar}>\r\n          Dim navbar\r\n        </div>\r\n        <div\r\n          className=\"item\"\r\n          onClick={() => this.copy(\"Copy this text to clipboard!\")}\r\n        >\r\n          Copy this text to clipboard!\r\n        </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LandingPage;\r\n","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\n\r\nclass OtherPage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        Try clicking the close button on the navbar or touch your phone back\r\n        button!\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OtherPage;\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\nimport WebBridgeLoader from \"./helper/WebBridgeLoader\";\r\nimport LandingPage from \"./components/LandingPage\";\r\nimport OtherPage from \"./components/OtherPage\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    WebBridgeLoader.load();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <React.Fragment>\r\n          <Route exact path=\"/\" component={LandingPage} />\r\n          <Route exact path=\"/other\" component={OtherPage} />\r\n        </React.Fragment>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}